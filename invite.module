<?php
// $Id: invite.module,v 1.25.2.10 2009/10/05 13:24:15 smk Exp $

/**
 * @file
 * Allows your users to send and track invitations to join your site.
 */

/**
 * Session names.
 */
define('INVITE_SESSION',        'invite_code');
define('INVITE_SESSION_FAILED', 'invite_failed');
define('INVITE_SESSION_ADMIN',  'invite_admin_filter');

/**
 * Value for unlimited invites.
 */
define('INVITE_UNLIMITED', -1);

/**
 * Invoke hook_invite().
 *
 * @param $invite
 *   The invite object.
 * @param $op
 *   Operation.
 */
function invite_invoke_all($invite, $op) {
  module_invoke_all('invite', $op, $invite);
}

/**
 * Implementation of hook_help().
 */
function invite_help($path, $arg) {
  switch ($path) {
    case 'admin/help#invite':
      return invite_module_help();

    // Introductory text on user profile pages.
    case 'user/%/invites':
    case 'user/%/invites/accepted':
      $output = '<p>'. t("The invitations shown on this page have been used to join the site. Clicking on an e-mail address takes you to the user's profile page.");
      break;
    case 'user/%/invites/pending':
      $output = '<p>'. t("The invitations shown on this page haven't been accepted yet.");
      break;
    case 'user/%/invites/expired':
      $output = '<p>'. t('The invitations shown on this page have not been used to register on the site within the expiration period of @count days.', array('@count' => variable_get('invite_expiry', 30)));
      break;

    default:
      return;
  }
  $output .= ' '. t('The status <em>deleted</em> means the user account has been terminated.') .'</p>';
  if (!user_access('withdraw accepted invitations')) {
    $output .= '<p>'. t("At any time, you may withdraw either pending or expired invitations. Accepted invitations can't be withdrawn and count permanently toward your invitation allotment.") .'</p>';
  }
  return $output;
}

/**
 * Display module help.
 */
function invite_module_help() {
  $file = drupal_get_path('module', 'invite') .'/README.txt';
  if (file_exists($file)) {
    return _filter_autop(check_plain(file_get_contents($file)));
  }
}

/**
 * Implementation of hook_theme().
 */
function invite_theme() {
  return array(
    'invite_page_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'invite.pages.inc',
    ),
    'invite_user_overview' => array(
      'arguments' => array('items' => NULL),
      'file' => 'invite.admin.inc',
    ),
    'invite_token_help' => array(
      'arguments' => array('type' => NULL, 'prefix' => NULL, 'suffix' => NULL),
      'file' => 'invite.token.inc',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function invite_perm() {
  return array(
    'send invitations',
    'send mass invitations',
    'track invitations',
    'withdraw accepted invitations'
  );
}

/**
 * Implementation of hook_init().
 *
 * Notify current user about accepted invitations.
 */
function invite_init() {
  global $user;
  if (!empty($user->invite_sent) && !module_invoke('throttle', 'status')) {
    invite_notify($user->uid);
  }
}

/**
 * Implementation of hook_menu().
 */
function invite_menu() {
  // Administration menu items.
  $items['admin/user/invite'] = array(
    'title' => 'Invites',
    'page callback' => 'invite_admin_overview',
    'access arguments' => array('administer site configuration'),
    'file' => 'invite.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/user/invite/list'] = array(
    'title' => 'Inviters',
    'weight' => -5,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/user/invite/details/%user'] = array(
    'title callback' => 'invite_admin_details_page_title',
    'title arguments' => array(4),
    'page callback' => 'invite_admin_details',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'file' => 'invite.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['admin/user/invite/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'invite.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  // Front-end menu items.
  $items['invite'] = array(
    'title' => 'Invite a friend',
    'title callback' => 'invite_page_title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_page_form', array()),
    'access arguments' => array('send invitations'),
    'file' => 'invite.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['invite/accept/%invite'] = array(
    'page callback' => 'invite_accept',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'invite.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['invite/withdraw'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_cancel_form'),
    'access arguments' => array('track invitations'),
    'file' => 'invite.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['invite/resend/%invite'] = array(
    'title' => 'Resend invitation',
    'page callback' => 'invite_resend',
    'page arguments' => array(2),
    'access arguments' => array('send invitations'),
    'file' => 'invite.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Tabs on user profile.
  $items['user/%user/invites'] = array(
    'title' => 'Invitations',
    'page callback' => 'invite_user_overview',
    'page arguments' => array(1, 'accepted'),
    'access callback' => 'invite_user_access',
    'access arguments' => array('track invitations', 1),
    'file' => 'invite.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/invites/accepted'] = array(
    'title' => 'Accepted',
    'weight' => -5,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/invites/pending'] = array(
    'title' => 'Pending',
    'page callback' => 'invite_user_overview',
    'page arguments' => array(1, 'pending'),
    'access callback' => 'invite_user_access',
    'access arguments' => array('track invitations', 1),
    'file' => 'invite.admin.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/invites/expired'] = array(
    'title' => 'Expired',
    'page callback' => 'invite_user_overview',
    'page arguments' => array(1, 'expired'),
    'access callback' => 'invite_user_access',
    'access arguments' => array('track invitations', 1),
    'file' => 'invite.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/invites/new'] = array(
    'title' => 'New invitation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_page_form', array()),
    'access callback' => 'invite_user_access',
    'access arguments' => array('send invitations', 1),
    'file' => 'invite.pages.inc',
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Override the user/register menu access handler with a custom
 * implementation.
 */
function invite_menu_alter(&$items) {
  if (invite_user_registration_by_invite_only()) {
    $items['user/register']['access callback'] = 'invite_user_register_access';
  }
}

/**
 * Determine if user registration mode is set to invite only.
 */
function invite_user_registration_by_invite_only() {
  return (variable_get('user_register', 1) === '1-inviteonly');
}

/**
 * Access callback; determine access to user registration form.
 */
function invite_user_register_access() {
  if (!invite_load_from_session() && !user_access('administer users')) {
    drupal_set_message(t('Sorry, new user registration by invitation only.'));
    return FALSE;
  }

  // Let user.module take care of default conditions.
  return user_register_access();
}

/**
 * Title callback allowing for customization of the invite page title.
 *
 * @param $title
 *   The default page title, ie. non-overridden.
 */
function invite_page_title($title) {
  return variable_get('invite_page_title', $title);
}

/**
 * Title callback for the user details administration page.
 *
 * @param $account
 */
function invite_admin_details_page_title($account) {
  return t('Invitees of @name', array('@name' => $account->name));
}

/**
 * Access callback ensuring the user profile tabs are visible only to their
 * owner.
 *
 * @param $permission
 *   Required permission to view the item.
 * @param $account
 *   A user object.
 */
function invite_user_access($permission, $account) {
  global $user;
  return ($account->uid == $user->uid && user_access($permission));
}

/**
 * Displays a notification message when an invited user has registered.
 *
 * @param $uid
 *   The user id to check accepted invitations for.
 */
function invite_notify($uid) {
  $result = db_query('SELECT invitee FROM {invite_notifications} WHERE uid = %d', $uid);
  while ($row = db_fetch_object($result)) {
    $account = user_load(array('uid' => $row->invitee, 'status' => 1));
    if ($account) {
      drupal_set_message(t('!user (@email) has joined @site-name!', array('!user' => theme('username', $account), '@email' => $account->mail, '@site-name' => variable_get('site_name', t('Drupal')))));
      db_query("DELETE FROM {invite_notifications} WHERE uid = %d AND invitee = %d", $uid, $row->invitee);
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add new registration mode 'by invitation only' to user settings form.
 */
function invite_form_user_admin_settings_alter(&$form, $form_state) {
  // By prepending the option value with a numeric value, other modules still
  // work as expected, as long as they are using the non-strict PHP comparison
  // operator (since '1-inviteonly' == 1 yields TRUE). To determine the real
  // setting use invite_user_registration_by_invite_only().
  // However, setting the new mode is only allowed if no other module
  // has overridden the menu access handler for the user registration form.
  $item = menu_get_item('user/register');
  if (in_array($item['access_callback'], array('user_register_access', 'invite_user_register_access'))) {
    $form['registration']['user_register']['#options']['1-inviteonly'] = t('New user registration by invitation only.');
  }
  // Clear menu cache on submit to allow our custom access handler to
  // snap in.
  $form['#submit'][] = 'menu_rebuild';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Fill in e-mail field on user register form.
 */
function invite_form_user_register_alter(&$form, $form_state) {
  // Prevent this page from being cached.
  $GLOBALS['conf']['cache'] = CACHE_DISABLED;

  if ($invite = invite_load_from_session()) {
    // There are two possible locations for the e-mail field.
    if (isset($form['account']['mail'])) {
      $form['account']['mail']['#default_value'] = $invite->email;
    }
    else {
      $form['mail']['#default_value'] = $invite->email;
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Replace links from user login block if registration is by invitation only.
 */
function invite_form_user_login_block_alter(&$form, $form_state) {
  if (invite_user_registration_by_invite_only()) {
    $items = array(l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.')))));
    $form['links']['#value'] = theme('item_list', $items);
  }
}

/**
 * Load an invite record for a tracking code.
 *
 * @param $code
 *   A registration code to load the invite record for.
 * @return
 *   An invite record.
 */
function invite_load($code) {
  $result = db_query("SELECT * FROM {invite} WHERE code = '%s' AND canceled = 0", $code);
  if ($record = db_fetch_array($result)) {
    return new invite($record);
  }
  return FALSE;
}

/**
 * Returns an invite record from an invite code stored in the user's session.
 *
 * @return
 *   An invite record, or FALSE if there is no invite code stored in the
 *   user's session.
 */
function invite_load_from_session() {
  if (isset($_SESSION[INVITE_SESSION])) {
    return invite_load($_SESSION[INVITE_SESSION]);
  }
  return FALSE;
}

/**
 * Implementation of hook_user().
 */
function invite_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      $invite = invite_load_from_session();

      if (!$invite) {
        // Try to look up an invitation in case a user has been invited to join
        // the site, but did go straight to the site and signed up without
        // using the invite link.
        $code = db_result(db_query("SELECT code FROM {invite} WHERE email = '%s'", $account->mail));
        if ($code) {
          $invite = invite_load($code);
        }
      }
      if ($invite) {
        // Process the invitation and assign target roles to the user. These
        // will be saved by user_save().
        $roles = invite_process($invite, $account);

        if ($roles) {
          if (!isset($edit['roles']) || !is_array($edit['roles'])) {
            $edit['roles'] = array();
          }
          $edit['roles'] += $roles;

          // We need to notify other modules of the role change, otherwise they
          // will be unaware of it.
          user_module_invoke('update', $edit, $account);
        }

        // Flag the inviting user, this triggers status notifications and
        // saves us some queries otherwise.
        if ($invite->inviter->uid) {
          user_save($invite->inviter, array('invite_sent' => TRUE));
        }

        unset($_SESSION[INVITE_SESSION]);
      }
      break;

    case 'delete':
      invite_delete($account->uid);
      break;
  }
}

/**
 * Process a user that accepted an invitation.
 *
 * @param $invite
 *   An invite object.
 * @param $account
 *   The user object that accepted the invitation.
 * @return
 *   Array of target roles for the invited user.
 */
function invite_process($invite, $account) {
  // Update the invitation record.
  db_query("UPDATE {invite} SET email = '%s', invitee = %d, joined = %d WHERE reg_code = '%s'", $account->mail, $account->uid, time(), $invite->reg_code);

  // Delete all invites to these e-mail addresses, except this one.
  db_query("DELETE FROM {invite} WHERE (email = '%s' OR email = '%s') AND reg_code <> '%s'", $invite->email, $account->mail, $invite->reg_code);

  // Add all users who invited this particular e-mail address to the
  // notification queue.
  db_query("INSERT INTO {invite_notifications} (uid, invitee) SELECT uid, %d from {invite} WHERE (email = '%s' OR email = '%s') AND canceled = 0", $account->uid, $invite->email, $account->mail);

  // Unblock the user account.
  db_query("UPDATE {users} SET status = 1 WHERE uid = %d", $account->uid);

  // Determine target roles for invited user.
  $roles = invite_target_roles($invite);

  // Allow other modules to act on the role escalation.
  $invite->invitee = $account;
  // Need to pass $roles by reference.
  foreach (module_implements('invite') as $module) {
    $function = $module . '_invite';
    $function('escalate', $invite, $roles);
  }

  return $roles;
}

/**
 * Determine target roles based on the roles of an inviter.
 *
 * @param $invite
 *   An invite object.
 * @return
 *   Array of target roles for an invited user.
 */
function invite_target_roles($invite) {
  $targets = array();

  // Add a dummy entry to retrieve the default target role setting.
  $roles = array('default' => 'default');

  // Add roles of inviter.
  if ($invite->inviter) {
    $roles = array_merge($roles, array_intersect($invite->inviter->roles, user_roles(FALSE, 'send invitations')));
  }

  // Map to configured target roles.
  foreach ($roles as $rid => $role) {
    $target = variable_get('invite_target_role_'. $rid, DRUPAL_AUTHENTICATED_RID);
    if ($target != DRUPAL_AUTHENTICATED_RID) {
      $targets[$target] = $target;
    }
  }

  return $targets;
}

/**
 * Physically delete all invites from and to a user.
 *
 * @param $uid
 *   The user id to delete invites for.
 */
function invite_delete($uid) {
  // Delete invite for this user if the originating user has the permission.
  $origin = db_result(db_query("SELECT uid FROM {invite} WHERE invitee = %d", $uid));
  if ($origin && $inviter = user_load(array('uid' => $origin))) {
    if (user_access('withdraw accepted invitations', $inviter)) {
      db_query("DELETE FROM {invite} WHERE invitee = %d", $uid);
    }
  }
  // Delete any invites originating from this user.
  db_query("DELETE FROM {invite} WHERE uid = %d", $uid);
  // Clean up the notification queue.
  db_query("DELETE FROM {invite_notifications} WHERE uid = %d OR invitee = %d", $uid, $uid);
}

/**
 * Implementation of hook_block().
 */
function invite_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array('info' => t('Invite a friend'), 'cache' => BLOCK_CACHE_PER_USER);
    return $blocks;
  }
  else if ($op == 'view') {
    if (user_access('send invitations')) {
      $block = array(
        'subject' => t('Invite a friend'),
        'content' => drupal_get_form('invite_block_form'),
      );
      return $block;
    }
  }
}

/**
 * Form builder; generate the invite block form.
 *
 * @ingroup forms
 * @see invite_form_validate()
 * @see invite_default_validators()
 * @see invite_form_submit()
 */
function invite_block_form(&$form_state) {
  global $user;

  $remaining_invites = invite_get_remaining_invites($user);

  $form['invite'] = array(
    '#value' => t('Recommend @site-name to:', array('@site-name' => variable_get('site_name', t('Drupal')))),
  );
  $description = '';
  if ($remaining_invites != INVITE_UNLIMITED) {
    $description = format_plural($remaining_invites, '1 invite remaining', '@count invites remaining');
  }
  $form['email'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 64,
    '#description' => $description,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send invite'),
  );
  $form['link'] = array(
    '#prefix' => '<div><small>',
    '#value' => l(t('View your invites'), "user/$user->uid/invites"),
    '#suffix' => '</small></div>',
    '#access' => user_access('track invitations') && $user->uid,
  );

  if ($remaining_invites != INVITE_UNLIMITED) {
    $form['remaining_invites'] = array(
      '#type' => 'value',
      '#value' => $remaining_invites,
    );
  }
  if ($remaining_invites == 0) {
    // Hide block.
    $form['#access'] = FALSE;
  }

  $form['#validate'] = array_merge(array('invite_form_validate'), invite_default_validators());
  $form['#submit'] = array('invite_form_submit');

  return $form;
}

/**
 * Set up a series for validators which check for already registered or
 * invited users and invitation limits.
 *
 * @see invite_form_registered_validate()
 * @see invite_form_invited_validate()
 * @see invite_form_limit_validate()
 * @see invite_form_final_validate()
 * @return array
 *   A simple list of validate functions.
 */
function invite_default_validators() {
  return array('invite_form_registered_validate', 'invite_form_invited_validate', 'invite_form_limit_validate', 'invite_form_final_validate');
}

/**
 * Forms API callback; validate submitted form data.
 *
 * @see invite_page_form()
 * @see invite_block_form()
 */
function invite_form_validate($form, &$form_state) {
  module_load_include('inc', 'invite', 'invite.pages');

  // Extract valid e-mail addresses from text and save them to $form_state.
  $form_state['emails'] = invite_extract_emails($form_state['values']['email']);

  // Check number of e-mails.
  if (!user_access('send mass invitations') && count($form_state['emails']['valid']) > 1) {
    form_set_error('email', t('You cannot send more than one invitation.'));
  }
}

/**
 * Send an invitation.
 *
 * @param $to
 *   The e-mail address or addresses where the message will be sent to.
 * @param $options
 *   An array of additional parameters used to initialize the invite object.
 * @return
 *   Result code from drupal_mail().
 */
function invite_send($to, array $options = array()) {
  // Create the invite object.
  $options['email'] = $to;
  $invite = new invite($options);
  return $invite->send();
}

/**
 * Implementation of hook_mail().
 */
function invite_mail($key, &$message, $params) {
  global $user;

  $invite = $params['invite'];

  // Set Reply-To to either the inviting user's e-mail, or a manually
  // configured address.
  $reply_to = (variable_get('invite_use_users_email_replyto', FALSE) && $user->uid) ? $user->mail : variable_get('invite_manual_reply_to', '');
  if (valid_email_address($reply_to)) {
    $message['headers']['Reply-To'] = $reply_to;
  }

  // Generate the e-mail message.
  $message['subject'] = $invite->get_message_subject();
  $message['body'][] = $invite->get_message_body();
}

/**
 * Calculate the remaining invites of a user.
 *
 * @param $account
 *   A user object.
 * @return
 *   The number of remaining invites.
 */
function invite_get_remaining_invites($account) {
  if ($account->uid == 1) {
    return INVITE_UNLIMITED;
  }

  // Check user property for remaining invites.
  $data = unserialize($account->data);
  if (isset($data['invites'])) {
    $remaining = $data['invites'];
  }
  else {
    $remaining = invite_get_role_limit($account);
    if ($remaining > 0) {
      // Legacy support.
      $sent = db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE uid = %d", $account->uid));
      $remaining = max($remaining - $sent, 0);
      if ($sent > 0) {
        // Update user property for faster lookup next time.
        user_save($account, array('invites' => $remaining));
      }
    }
  }

  return $remaining;
}

/**
 * Calculate the max. number of invites based on a user's role.
 *
 * @param $account
 *   A user object.
 * @return
 *   The configured maximum of invites.
 */
function invite_get_role_limit($account) {
  if (!isset($account->roles)) {
    $account = user_load(array('uid' => $account->uid));
  }

  $role_limit = 0;
  foreach (user_roles(FALSE, 'send invitations') as $rid => $role) {    
    if (array_key_exists($rid, $account->roles)) {
      $role_max = variable_get('invite_maxnum_'. $rid, INVITE_UNLIMITED);
      if ($role_max == INVITE_UNLIMITED) {
        return INVITE_UNLIMITED;
      }
      $role_limit = max($role_max, $role_limit);
    }
  }
  return $role_limit;
}

/**
 * Return count of successful, pending, or unsuccessful invitations.
 *
 * @param $uid
 *   The user id to calculate count for.
 * @param $op
 *   The type of count to calculate: accepted, pending or expired.
 * @return
 *   A count.
 */
function invite_count($uid, $op) {
  switch ($op) {
    case 'accepted':
      return db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE uid = %d AND joined <> 0", $uid));
    case 'pending':
      return db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE uid = %d AND joined = 0 AND expiry >= %d", $uid, time()));
    case 'expired':
      return db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE uid = %d AND joined = 0 AND expiry < %d", $uid, time()));
  }
}

/**
 * Implementation of hook_disable().
 */
function invite_disable() {
  if (invite_user_registration_by_invite_only()) {
    variable_set('user_register', 1);
    drupal_set_message(t('User registration option reset to %no_approval.', array('%no_approval' => t('Visitors can create accounts and no administrator approval is required.'))));
  }
}
