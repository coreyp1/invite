<?php
// $Id: invite.module,v 1.10.2.31 2007-03-10 20:32:55 smk Exp $
/** 
 * @file 
 * The invite.module provides an 'Invite a friend' feature. It allows your
 * users to send and track invitations to join your site.
 */ 

/** 
 * Implementation of hook_help(). 
 */ 
function invite_help($section) {

  switch ($section) {
    case 'admin/modules#description':
      return t('Allows users to send GMail style invitations, and automatically escalates new users who join the site to a role of your designation.');
      
    case 'invite':
      return _invite_get_help_text();
  }
}

/**
 * Implementation of hook_perm().
 */
function invite_perm() {
  return array('send invitations');
} 

/**
 * Menu callback.
 */
function _invite_settings() {
  $target_roles = $roles = user_roles();
  unset($target_roles[DRUPAL_ANONYMOUS_RID]);

  $form['user_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('User settings'),
  );

  // settings for new members
  $form['user_settings']['invite_target_role_default'] = array(
    '#type' => 'select',
    '#title' => t('Target role (default)'),
    '#default_value' => variable_get('invite_target_role_default', DRUPAL_AUTHENTICATED_RID),
    '#options' => $target_roles,
    '#description' => t('Choose the default role that invited users will be added to when they register. For example, <em>authenticated user</em>.'),
    '#required' => TRUE,
  );
  
  foreach ($roles as $role) {
    $role_no_space = str_replace(' ', '_', $role);
    $form['user_settings']['invite_target_role_'. $role_no_space] = array(
      '#type' => 'select',
      '#title' => t('Target role for %role invitees', array('%role' => $role)),
      '#default_value' => variable_get('invite_target_role_'. $role_no_space, DRUPAL_AUTHENTICATED_RID),
      '#options' => $target_roles,
      '#description' => t('Choose the role that invited users will be added to if invited by a %role.', array('%role' => $role)),
      '#required' => TRUE,
    );
  }

  $form['user_settings']['invite_expiry'] = array(
    '#type' => 'select',
    '#title' => t('Invitation expiry'),
    '#default_value' => variable_get('invite_expiry', 30),
    '#options' => drupal_map_assoc(array(5, 10, 15, 20, 25, 30, 45, 60)),
    '#description' => t('Set the expiry period for user invitations, in days.'),
    '#multiple' => FALSE,
    '#required' => TRUE,
  );  
  $form['user_settings']['invite_allow_join_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow deletion of joined users'),
    '#default_value' => variable_get('invite_allow_join_delete', 0),
    '#description' => t('This option allows users to delete invitations marked as <em>joined</em>. Useful to prevent users from deleting their account to be re-invited.')
  );

  $form['user_roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role limitations'),
    '#tree' => FALSE
  );
  
  foreach ($roles as $role) {
    $role_no_space = str_replace(' ', '_', $role);
    $form['user_roles']['invite_maxnum_'.$role_no_space] = array(
      '#type' => 'select',
      '#title' => t('Limit for %role', array('%role' => $role)),
      '#default_value' => variable_get('invite_maxnum_'. $role_no_space, 0),
      '#options' => array(0 => t('unlimited'), 5 => 5, 10 => 10, 20 => 20, 50 => 50, 100 => 100, 300 => 300, 500 => 500, 1000 => 1000),
      '#description' => t('Allows to limit the total number of invitations a %role can send.', array('%role' => $role)),
      '#multiple' => FALSE,
      '#required' => TRUE,
    );
  }
  
  // email settings
  $form['email_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email settings'),
  );

  $form['email_settings']['invite_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('invite_subject', t("You've been invited")),
    '#size' => 20,
    '#maxlength' => 64,
    '#description' => t('Type the subject of the invitation email.'),
    '#required' => TRUE,
  );
  
  $form['email_settings']['invite_default_mail_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Mail template'),
    '#default_value' => _invite_get_mail_template(),
    '#required' => TRUE,
    '#description' => t('Use the following placeholders: @site, @homepage, @join_link, @message, @inviter.'),
  );

  $form['email_settings']['invite_use_users_email'] = array(
    '#type' => 'radios',
    '#title' => t('<em>From</em> email address'),
    '#description' => t('Choose which email address will be in the From: header for the invitation mails sent; <em>site</em> or <em>inviter</em>. <em>Site</em> will use the default email address of the site, whereas <em>inviter</em> will use the email address of the user who is sending the invitation. Alternatively, you can set this value manually by clicking on <em>advanced settings</em> below.'),
    '#options' => array(t('site'), t('inviter')),
    '#default_value' => variable_get('invite_use_users_email', 0),
  );

  $form['email_settings']['invite_use_users_email_replyto'] = array(
    '#type' => 'radios',
    '#title' => t('<em>Reply-To</em> email address'),
    '#description' => t('Choose which email address will be in the Reply-To: header for the invitation mails sent; <em>site</em> or <em>inviter</em>. <em>Site</em> will use the default email address of the site, whereas <em>inviter</em> will use the email address of the user who is sending the invitation. Alternatively, you can set this value manually by clicking on <em>advanced settings</em> below.'),
    '#options' => array(t('site'), t('inviter')),
    '#default_value' => variable_get('invite_use_users_email_replyto', 0),
  );

  $form['email_settings']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('<strong>Note:</strong> unless these fields are blank, they will override the radio button choices above.')
  );

  $form['email_settings']['advanced']['invite_manual_from'] = array(
    '#type' => 'textfield', 
    '#title' => t('Manually override <em>From</em> email address'), 
    '#default_value' => variable_get('invite_manual_from', variable_get('site_mail', ini_get('sendmail_from'))), 
    '#description' => t('The email address the invitation email is sent from.')
  );

  $form['email_settings']['advanced']['invite_manual_reply_to'] = array(
    '#type' => 'textfield', 
    '#title' => t('Manually override <em>Reply-To</em> email address'), 
    '#default_value' => variable_get('invite_manual_reply_to', variable_get('site_mail', ini_get('sendmail_from'))), 
    '#description' => t('The email address you want recipients to reply to.')
  );

  // invite page customization settings
  $form['invite_page'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invite page cutomization'),
  );

  $form['invite_page']['invite_page_title'] = array(
    '#type' => 'textfield', 
    '#title' => t('Invite page title'), 
    '#default_value' => variable_get('invite_page_title', t('Invite your friends and colleagues')), 
    '#description' => t('The title of the page where users invite friends.'),
    '#required' => TRUE
  );

  $form['invite_page']['invite_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Invite help text'),
    '#default_value' => _invite_get_help_text(),
    '#required' => FALSE,
    '#description' => t('Customize the text that appears above the email form on the invite page for users.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function invite_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/user/invite',
      'title' => 'Invite settings',
      'description' => t('Manage Invite settings'), 
      'callback' => 'drupal_get_form',
      'callback arguments' => '_invite_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
    );
    $items[] = array(
      'path' => 'invite',
      'title' => variable_get('invite_page_title', t('Invite your friends and colleagues')),
      'callback' => 'drupal_get_form',
      'callback arguments' => '_invite_form',
      'access' => user_access('send invitations'),
      'type' => MENU_NORMAL_ITEM);
    $items[] = array(
      'path' => 'invite/delete', 
      'callback' => 'invite_delete',
      'access' => user_access('send invitations'),
      'type' => MENU_CALLBACK);
  }
  else {
    // check for joined users
    _invite_check_messages();
  }

  return $items;
}
 
/**
 * Implementation of hook_form_alter().
 */
function invite_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'user_admin_settings':
      $form['registration']['user_register']['#options']['inviteonly'] = t('New user registration by invitation only.');
      break;

    case 'user_register': 
      $user_admin = user_access('administer users');
      $invite_only = (variable_get('user_register',1) == 'inviteonly');
      $valid_invite = FALSE;
      if ($code = arg(2)) {
        if ($invite = _invite_fetch_invite($code)) {
          $valid_invite = (!$invite->expired);
          $form['invite_code'] = array(
            '#type' => 'value',
            '#value' => $code,
          );
          $form['invite_referrer'] = array(
            '#type' => 'value',
            '#value' => $invite->referrer,
          );
        }
      }

      if ((!$user_admin) && $invite_only) {
        if (!$valid_invite) {
          if ($invite->expired) {
            drupal_set_message(t('Sorry, this invitation code has expired.'));
          }
          else {
            // Redirect to the standard login form if in invite only mode and a valid invite is not present
            drupal_set_message(t('Sorry, new user registration by invite only.'));
          }
          drupal_goto('user');
        }
        else if (isset($form['#submit']['user_register_submit'])) {
          // If we are in invite only mode, hijack the usual user registration submission
          $form['#submit'] = array('invite_register_submit' => array());
        }
      }
      break;

    case 'user_login_block':
      // Remove temptation for non members to try and register
      if (variable_get('user_register', 1) == 'inviteonly') {
        $new_items = array();
        $new_items[] = l(t('Request new password'), 'user/password', array('title' => t('Request new password via e-mail.')));
        $form['links']['#value'] = theme('item_list', $new_items);
      }
      break;
  } 
}

/**
 * Overrides user_register_submit().
 *
 * Perform invite validation on user registration submission for invite-only
 * sites. Checks for a valid invitation before passing control back to the
 * core user registration.
 */
function invite_register_submit($form_id, $form_values) {
  // Don't need to check for invite only mode as invite_form_alter has already done that for us
  if ($invite = _invite_fetch_invite($form_values['invite_code'])) {
    if (!$invite->expired) {
      return user_register_submit($form_id, $form_values);
    }
    else {
      drupal_set_message(t('Sorry, this invitation code has expired.'));
    }
  }
  else {
    // Do some watchdog stuff
    drupal_set_message(t('You have not been invited to join this site.'));
    watchdog('invite', t('Uninvited user registration attempt.'), WATCHDOG_WARNING);
  }
  return '<front>';
}

/**
 * Implementation of hook_user().
 */
function invite_user($op, &$edit, &$account, $category = NULL) { 
  switch ($op) {
    case 'insert':
      if (isset($edit['invite_code'])) {
        if ($invite = _invite_fetch_invite($edit['invite_code'])) {
          if (!$invite->expired) {
            // Update invitation status
            _invite_set_timestamp($edit['mail'], $account->uid, $edit['invite_code']);

            // Escalate user role
            _invite_role_escalate($account);

            // Activate user account for invite-only sites
            if (variable_get('user_register', 1) == 'inviteonly') {
              _invite_unblock($account->uid);
            }
          }
        } 
        else {
          watchdog('invite', t('Registration code failed for %name %email.', array('%name' => $account->name, '%email' => '<'. $account->mail .'>')), WATCHDOG_NOTICE, l(t('view'), 'user/'. $account->uid));
        }
      }
      break;

    case 'delete':
      // delete invites from this user
      db_query("DELETE FROM {invite} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Implementation of hook_cron().
 */
function invite_cron() {
  // TODO: cron should check which invitations are expired and possibly send a follow up mail
  // This should also trigger a module_invoke_all('invite', 'expire', $args) call so that other modules can 
  // react to the expired invitation.
}

/**
 * Displays the Invite form for users with appropriate permissions and
 * processes and validates the form, sending an email to the invitee
 */
function _invite_form() {
  global $user;
  
  //this displays all invites for a user, and counts how many invites they have left to give
  $form['invitations'] = array(
    '#type' => 'fieldset',
    '#title' => t('Your invitations'),
  );

  $inc = 0;
  $result = db_query("SELECT i.*, (u.uid IS NOT NULL) AS account_exists FROM {invite} i LEFT JOIN {users} u ON u.uid = i.mid WHERE i.uid = %d ORDER BY i.expiry DESC", $user->uid);
  while ($invite = db_fetch_object($result)){
    $delete_link = l(t('Delete invitation'), 'invite/delete/'. urlencode($invite->email));
    if (!$invite->timestamp) {
      $email_cell = check_plain($invite->email);
      $status_cell = ($invite->expiry < time()) ? t('Expired') : t('Pending');
      $action_cell = $delete_link;
    }
    else {
      $email_cell = $invite->account_exists ? l($invite->email, 'user/'. $invite->mid) : '<em>'. check_plain($invite->email) .'</em>';
      $status_cell = $invite->account_exists ? t('Joined') : t('Deleted');
      $action_cell = variable_get('invite_allow_join_delete', 0) ? $delete_link : '&nbsp;';
    }
    $items[] = array($email_cell, $status_cell, $action_cell);
    $inc++;
  }
  
  if (count($items) > 0) {
    $headers = array(t('Email'), t('Status'), '&nbsp;');
    $table = theme('table', $headers, $items, array('id' => 'invite_table'));
  }
  else {
    $table = t('You have not sent any invitations yet.');
  }
  $form['invitations']['table'] = array(
    '#type' => 'markup',
    '#value' => $table,
  );
  
  $form['invite_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invite a friend'),
  );      
  
  $maximum_invites = _invite_max_invites_by_role();
  if ($maximum_invites > 0) {
    $invites_left = $maximum_invites - $inc;
    $form['invite_form']['remaining_invites'] = array(
      '#type' => 'markup',
      '#value' => t('You have @invites invites left.', array('@invites' => $invites_left)),
    );
  }
  
  //the invitation form
  if ($inc < $maximum_invites  || $maximum_invites == 0){
    $form['invite_form']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#default_value' => '',
      '#size' => 20,
      '#maxlength' => 64,
      '#description' => t('Type the email of the person you would like to invite'),
      '#required' => TRUE,
    );
    $form['invite_form']['message'] = array(
      '#type' => 'textarea',
      '#title' => t('Your message'),
      '#default_value' => '',
      '#required' => FALSE,
      '#description' => t('This message will be added to the mail sent to the person you are inviting.'),
    );        
    $form['invite_form']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  } else {
    drupal_set_message(t('Maximum number (@max) of invitations reached.', array('@max' => $maximum_invites)));
  }

  return $form;
}

function _invite_form_validate($form_id, &$edit) {
  global $user;
  
  if (!valid_email_address(trim($edit['email']))) {
    form_set_error('email', t('The email address does not appear to be valid syntax.'));
  }

  $x = _invite_check_invited($edit['email'], $user->uid);
  if ($x['is_invited']) {
    form_set_error('invite_email', $x['message']);
  }
}

function _invite_form_submit($form_id, $edit) {
  global $user;
  
  // generate code
  $code = _invite_create_regcode();

  // send email
  if ($success = _invite_send_invite('mail', $user->name, trim($edit['email']), $code, $edit['message'])) {
    db_query("INSERT INTO {invite} (email, reg_code, uid, expiry) VALUES ('%s', '%s', %d, %d)", trim($edit['email']), $code,$user->uid, time()+(variable_get('invite_expiry', 30)*60*60*24));  

    // notify other modules
    $args = array('inviter' => $user);
    module_invoke_all('invite', 'invite', $args);
  }
}

function invite_delete($email) {
  global $user;

  $email = urldecode($email);

  if ($email != '') {
    $invite = db_fetch_object(db_query("SELECT i.uid AS inviter, (u.uid IS NOT NULL) AS account_exists FROM {invite} i LEFT JOIN {users} u ON u.uid = i.mid WHERE i.email = '%s'", $email));
    // Inviter must match current user
    if ($invite->inviter == $user->uid) {
      // Verify that invite may be deleted
      if (!$invite->account_exists || variable_get('invite_allow_join_delete', 0)) {
        _invite_delete($email, $user->uid);
        drupal_set_message(t('Invitation to %email has been deleted.', array('%email' => $email)));
      }
      else {
        drupal_set_message(t('Invitations to registered users cannot be deleted.'));
      }
    }
    else {
      watchdog('invite', t('Detected malicious attempt to delete an invitation.'), WATCHDOG_WARNING, l(t('view'), 'user/'. $user->uid));
    }
  }
  drupal_goto('invite');
}

/**
 * @{
 * Module specific helper functions.
 */
function _invite_check_invited($email, $uid) {
  $rtn = array('is_invited' => FALSE, 'message' => '');
  
  if ((int)db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE email = '%s'", $email)) > 0) {
    $rtn['message'] = t('The user you are trying to invite has already been invited.');
    $rtn['is_invited'] = TRUE;
    return $rtn;
  }

  if ((int)db_result(db_query("SELECT COUNT(*) FROM {users} WHERE mail = '%s'", $email)) > 0) {
    $rtn['message'] = t('The user you are trying to invite has already registered.');
    $rtn['is_invited'] = TRUE;
    return $rtn;
  }

  $max_invites = _invite_max_invites_by_role();
  if ($max_invites > 0 && $max_invites <= db_result(db_query("SELECT COUNT(*) FROM {invite} WHERE uid = %d", $uid))) {
    $rtn['message'] = t('You have exceeded your allowed invitations.');
    $rtn['is_invited'] = TRUE;
    return $rtn;
  }
  
  return $rtn;
}

function _invite_max_invites_by_role($uid = NULL, $default_max = 0) {
  global $user;
  
  $account = (is_null($uid)) ? $user : user_load(array('uid' => $uid));
  foreach (user_roles() as $role) {
    $role_no_space = str_replace(' ', '_', $role);
    if (in_array($role, $account->roles)) {
      $max_by_role = variable_get('invite_maxnum_'. $role_no_space, 0);
      if ($max_by_role == 0) {
        return 0;
      }
      if ($max_by_role > $default_max) {
        $default_max = $max_by_role;
      }
    }
  }
  
  return $default_max;
}

function _invite_role_escalate($invitee) {
  $inviter_uid = db_result(db_query("SELECT uid FROM {invite} WHERE mid = %d", $invitee->uid));
  if ($inviter = user_load(array('uid' => $inviter_uid))) {
    $targets = array();
    foreach ($inviter->roles as $role) {
      $role_no_space = str_replace(' ', '_', $role);
      if (($target = variable_get('invite_target_role_'. $role_no_space, DRUPAL_AUTHENTICATED_RID)) != DRUPAL_AUTHENTICATED_RID) {
        $targets[$target] = $target;
      }
    }
  }
  if (($target_default = variable_get('invite_target_role_default', DRUPAL_AUTHENTICATED_RID)) != DRUPAL_AUTHENTICATED_RID) {
    $targets[$target_default] = $target_default;
  }
  foreach ($targets as $target) {
    db_lock_table('users_roles');
    db_query("DELETE FROM {users_roles} WHERE uid = %d AND rid = %d", $invitee->uid, $target);
    db_query("INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)", $invitee->uid, $target);
    db_unlock_tables();
  }
  $args = array('invitee' => $invitee, 'inviter' => $inviter, 'roles' => $targets);
  module_invoke_all('invite', 'escalate', $args);
}

function _invite_set_timestamp($email, $uid, $regcode){
  db_query("UPDATE {invite} SET timestamp = %d, mid = %d, email = '%s' WHERE reg_code = '%s'", time(), $uid, $email, $regcode);
}

function _invite_check_messages(){
  global $user;
  $result = db_query('SELECT i.email, i.mid, u.name FROM {invite} i INNER JOIN {users} u ON u.uid = i.mid WHERE i.uid = %d AND i.timestamp != 0 AND i.received = 0', $user->uid);
  if (db_num_rows($result)) {
    while ($new_user = db_fetch_object($result)) {
      drupal_set_message(t('!user-link (@user-email) has joined @site-name!', array('!user-link' => l($new_user->name, 'user/'. $new_user->mid), '@user-email' => $new_user->email, '@site-name' => variable_get('site_name', t('Drupal')))));
    }
    db_query('UPDATE {invite} SET received = 1 WHERE uid = %d AND timestamp != 0 AND received = 0', $user->uid);
  }
}

function _invite_create_regcode(){
  do {
    $reg_code = user_password(8);
    $r = db_query("SELECT COUNT(*) FROM {invite} WHERE reg_code = '%s'", $reg_code);
  } while ((int)db_result($r) > 0);
  return $reg_code;
}

function _invite_send_invite($op, $user_name = "[username]", $email ="[recipient-email]", $code = "registration-code", $message = '[your message]'){
  global $base_url, $user;

  // this next bit sets From and Reply-To headers
  if(!$from = variable_get('invite_manual_from', NULL)) {
    if (variable_get('invite_use_users_email', t('inviter'))) {
      $from = $user->mail;
    }
    else {
      $from = variable_get('site_mail', ini_get('sendmail_from'));
    }
  }
  if(!$replyto = variable_get('invite_manual_reply_to', NULL)) {
    if (variable_get('invite_use_users_email_replyto', t('inviter'))) {
      $replyto = $user->mail;
    }
    else {
      $replyto = variable_get('site_mail', ini_get('sendmail_from'));
    }
  }
  $subject = variable_get('invite_subject',t("You've been invited"));

  $template = _invite_get_mail_template();
  $site = variable_get('site_name', t('Drupal'));
  $join_link = url('user/register/'. $code, NULL, NULL, TRUE);
  $homepage = $base_url;
  $inviter = $user_name;

  $body = t($template, array('@site' => $site, '@join_link' => $join_link, '@homepage' => $homepage, '@message' => $message, '@inviter' => $inviter));

  switch ($op){
    case "mail":
      if ($success = drupal_mail('invite-mail', $email, $subject, wordwrap($body, 72), $from)) {
        drupal_set_message(t('Your invitation was sent successfully.'));
      }
      else {
        drupal_set_message(t('Problems occurred sending the invitation. Please contact the site administrator.'), 'error');
        watchdog('invite', t("Failed sending invitation. To: @email From: @from", array('@email' => $email, '@from' => $from)));
      }
      return $success;
  }
}

function _invite_get_mail_template() {
  $template = t("Your friend, @inviter has invited you to join @site [@homepage].

To become a member of @site, click the link below or paste it into the address bar of your browser. 

@join_link

----------

@message");

  return variable_get('invite_default_mail_template', $template);
}

function _invite_get_help_text() {
  $help = t("<p>This is an overview of the invitations you have sent. The status of each invitation is shown:
<ul>
  <li><strong>Joined</strong>: Shows that the person you have invited has used your invitation to join the site. Click on the email address to take you to their profile page.</li>
  <li><strong>Pending</strong>: The invitation has been sent, but your friend has still not accepted the invitation. You may send a reminder, by clicking the 'Remind Me' link.</li>
  <li><strong>Expired</strong>: The invitation has not been used to register on the site within the expiration period.</li>
</ul>
</p>
<p>At any time, you may delete either 'Pending' or 'Expired' invitations. 'Joined' invitation cannot be deleted and count permanently toward your invitation allotment.</p>");

  return variable_get('invite_help_text', $help);
}

function _invite_unblock($uid) {
  db_query("UPDATE {users} SET status = 1 WHERE uid = %d", $uid);
}

function _invite_fetch_invite($invite_code) {
  return db_fetch_object(db_query("SELECT uid AS referrer, (expiry < %d) AS expired FROM {invite} WHERE reg_code = '%s' AND timestamp = 0", time(), $invite_code));
}

function _invite_delete($email, $inviter_uid) {
  global $user;
  db_query("DELETE FROM {invite} WHERE email = '%s'", $email);
  $inviter = ($user->uid == $inviter_uid) ? $user : user_load(array('uid' => $inviter_uid));
  $args = array('inviter' => $inviter, 'email' => $email);
  module_invoke_all('invite', 'cancel', $args);
}
